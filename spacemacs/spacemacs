;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.
(fset 'xterm-color-unfontify-region 'font-lock-default-unfontify-region)

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path
   '("~/.config/dotfiles/spacemacs/private/")

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(python
     csv
     osx
     graphviz
     ;; clojure
     sql
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     ;; (auto-completion
     ;;  :variables
     ;;  auto-completion-private-snippets-directory "~/.config/dotfiles/spacemacs/snippets/"
     ;;  )
     emacs-lisp
     git
     ;; github
     (markdown
      :variables
      markdown-live-preview-engine 'vmd)
     (org
      :variables
      org-directory "~/Dropbox/org"
      org-agenda-files '("~/Dropbox/org/notes.org")
      org-default-notes-file "~/Dropbox/org/notes.org"
      org-enable-github-support t)
     (shell
      :variables
      eshell-buffer-maximum-lines 5000
      shell-default-position 'full
      shell-default-shell 'eshell)
     version-control
     html
     js
     my-prettier-js
     (syntax-checking
      :variables
      syntax-checking-enable-tooltips nil)
     spell-checking
     nodejs-repl
     evil-walk-on-the-edge

     ;; editorconfig
     yaml
     css-comb
     vinegar
     yasnippet
     hippie-exp
     ruby
     terminal-here
     restclient
     bufshow
     runtests
     (mu4e
      :variables
      mu4e-spacemacs-layout-name "@Mu4e"
      mu4e-spacemacs-layout-binding "m"
      mu4e-mu-binary "/usr/local/bin/mu"
      mu4e-installation-path "/usr/local/Cellar/mu/1.2.0_1/share/emacs/site-lisp/mu/mu4e"
      mu4e-update-interval 300
      mu4e-html2text-command "w3m -dump -s -T text/html -o display_link_number=true | sed 's#^\\(\\[[[:digit:]]\\+\\]\\) -$#\\1 https://no.op#'"
      mu4e-view-prefer-html t
      mu4e-view-show-addresses t
      mu4e-index-lazy-check t
      mu4e-enable-mode-line t
      mu4e-enable-notifications t
      mu4e-context-policy 'pick-first
      mu4e-alert-interesting-mail-query "flag:unread AND NOT flag:trashed AND (maildir:/Personal/INBOX OR maildir:/Work/INBOX)"
      mu4e-compose-format-flowed t
      mu4e-compose-dont-reply-to-self t
      mu4e-split-view nil
      mu4e-headers-include-related nil
      )
     )

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages
   '(
     json-mode
     forge
     poly-markdown
     typescript-mode
     todotxt-mode
     less-css-mode
     material-theme
     monokai-theme
     speed-type
     visual-fill-column
     figlet
     graphql-mode
     mu4e-jump-to-list
     )

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages
   '(
     evil-search-highlight-persist
     emmet-mode
     smartparens
     )

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only
   ))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; lastest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default nil)
   dotspacemacs-verify-spacelpa-archives nil

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim

   ;; If non-nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(monokai
                         spacemacs-dark
                         spacemacs-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `vim-powerline' and `vanilla'. The first three
   ;; are spaceline themes. `vanilla' is default Emacs mode-line. `custom' is a
   ;; user defined themes, refer to the DOCUMENTATION.org for more info on how
   ;; to create your own spaceline theme. Value can be a symbol or list with\
   ;; additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("DejaVu Sans Mono"
                               :size 16
                               ;; :weight normal
                               ;; :width normal
                               ;; :powerline-scale 1.1
                               )

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; If non-nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ nil

   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t

   ;; If non-nil, `J' and `K' move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil

   ;; If non-nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil

   ;; if non-nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil

   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom

   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always

   ;; If non-nil, the paste transient-state is enabled. While enabled, pressing
   ;; `p' several times cycles through the elements in the `kill-ring'.
   ;; (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "rg" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil)
  ;; User initialization goes here
  )

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  )

(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."
  (define-key evil-evilified-state-map "æ" 'evil-search-forward)
  (define-key evil-motion-state-map (kbd "æ") 'evil-search-forward)
  (define-key evil-motion-state-map (kbd "C-æ") 'evil-search-backward)

  (define-key evil-insert-state-map (kbd "M-a") '(lambda () (interactive) (insert "å")))
  (define-key evil-insert-state-map (kbd "M-A") '(lambda () (interactive) (insert "Å")))
  (define-key evil-insert-state-map (kbd "M-'") '(lambda () (interactive) (insert "æ")))
  (define-key evil-insert-state-map (kbd "M-\"") '(lambda () (interactive) (insert "Æ")))
  (define-key evil-insert-state-map (kbd "M-o") '(lambda () (interactive) (insert "ø")))
  (define-key evil-insert-state-map (kbd "M-O") '(lambda () (interactive) (insert "Ø")))

  (define-key evil-normal-state-map "s" 'evil-avy-goto-word-or-subword-1)

  (add-to-list 'auto-mode-alist '("\\.ko$" . html-mode))
  (add-to-list 'auto-mode-alist '("\\.ejs$" . html-mode))
  (add-to-list 'auto-mode-alist '("\\.cjson$" . json-mode))

  (eval-after-load 'eshell
    '(progn
       (add-to-list 'eshell-visual-options '("jest" "--watch"))
       (add-to-list 'eshell-visual-subcommands '("git" "hist" "diff" "log" "show"))
       ))

  (setq powerline-default-separator nil)

  (setq todotxt-default-file (expand-file-name "~/Dropbox/todo/todo.txt"))
  (setq todotxt-default-archive-file (expand-file-name "~/Dropbox/todo/done.txt"))
  (add-to-list 'auto-mode-alist '("/todo.txt$" . todotxt-mode))
  (add-to-list 'auto-mode-alist '("/done.txt$" . todotxt-mode))

  ;; (add-to-list 'projectile-globally-ignored-directories ".yarn_packages")

  ;; grep
  (eval-after-load 'grep
    '(progn
       (add-to-list 'grep-find-ignored-directories "node_modules")))

  (eval-after-load 'markdown
    (remove-hook 'markdown-mode-hook 'spacemacs/activate-mmm-mode))

  ;; (setq browse-url-browser-function 'browse-url-generic
  ;;       engine/browser-function 'browse-url-generic
  ;;       browse-url-generic-program "open -a 'Google Chrome'")

  ;; (setq browse-url-browser-function 'browse-url-generic
  ;;       browse-url-generic-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")

  (setq magit-repository-directories '("~/Projects/"))

  (add-to-list 'spacemacs-indent-sensitive-modes 'js-mode)

  (require 'smtpmail)

  (setq message-send-mail-function 'smtpmail-send-it
        starttls-use-gnutls t
        smtpmail-auth-credentials
        (expand-file-name "~/.authinfo.gpg")
        smtpmail-smtp-service 587
        smtpmail-debug-info t)


  (eval-after-load 'mu4e
    '(progn
       (setq mu4e-user-agent-string
             (format "mu4e %s; spacemacs %s" mu4e-mu-version spacemacs-version))

       (define-key mu4e-headers-mode-map (kbd "L") 'mu4e-jump-to-list)

       (setq mu4e-contexts
             `( ,(make-mu4e-context
                  :name "Personal"
                  :match-func (lambda (msg) (when msg
                                              (string-prefix-p "/Personal" (mu4e-message-field msg :maildir))))
                  :vars '(
                          (user-mail-address . "sune@we-knowhow.dk")
                          (mu4e-trash-folder . "/Personal/INBOX.Trash")
                          (mu4e-refile-folder . "/Personal/INBOX.Archive")
                          (mu4e-sent-folder . "/Personal/INBOX.Sent")
                          (mu4e-drafts-folder . "/Personal/INBOX.Drafts")

                          (mu4e-bookmarks . (("maildir:/Personal/INBOX" "Inbox" ?i)
                                             ("maildir:/Personal/INBOX.Todo" "Todo" ?t)
                                             ("maildir:/Personal/INBOX.Archive" "Archive" ?a)
                                             ("flag:unread AND NOT flag:trashed AND (maildir:/Personal/INBOX OR maildir:/Work/INBOX)"
                                              "Unread messages" ?u)
                                             ("flag:unread AND flag:list AND NOT flag:trashed AND (maildir:/Personal/INBOX OR maildir:/Work/INBOX)"
                                              "Unread list" ?l)
                                             ("date:today..now" "Today's messages" ?d)
                                             ("date:7d..now" "Last 7 days" ?w)
                                             ("mime:image/*" "Messages with images" ?p)))

                          (smtpmail-starttls-credentials . (("send.one.com" 587 nil nil)))
                          (smtpmail-default-smtp-server . "send.one.com")
                          (smtpmail-smtp-server . "send.one.com")
                          ))
                ,(make-mu4e-context
                  :name "Work"
                  :match-func (lambda (msg) (when msg
                                              (string-prefix-p "/Work" (mu4e-message-field msg :maildir))))
                  :vars '(
                          (user-mail-address . "ssimonsen@zendesk.com")
                          (mu4e-trash-folder . "/Work/[Gmail].Trash")
                          (mu4e-refile-folder . "/Work/[Gmail].All Mail")
                          (mu4e-sent-folder . "/Work/[Gmail].Sent Mail")
                          (mu4e-drafts-folder . "/Work/[Gmail].Drafts")

                          (mu4e-bookmarks . (("maildir:/Work/INBOX" "Inbox" ?i)
                                             ("maildir:\"/Work/[Gmail].All Mail\"" "All Mail" ?a)
                                             ("flag:unread AND NOT flag:trashed AND (maildir:/Personal/INBOX OR maildir:/Work/INBOX)"
                                              "Unread messages" ?u)
                                             ("flag:unread AND flag:list AND NOT flag:trashed AND (maildir:/Personal/INBOX OR maildir:/Work/INBOX)"
                                              "Unread list" ?l)
                                             ("date:today..now" "Today's messages" ?d)
                                             ("date:7d..now" "Last 7 days" ?w)
                                             ("mime:image/*" "Messages with images" ?p)))

                          (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
                          (smtpmail-default-smtp-server . "smtp.gmail.com")
                          (smtpmail-smtp-server . "smtp.gmail.com")
                          ))
                ))

       ;; This sets `mu4e-user-mail-address-list' to the concatenation of all
       ;; `user-mail-address' values for all contexts. If you have other mail
       ;; addresses as well, you'll need to add those manually.
       (setq mu4e-user-mail-address-list
             (delq nil
                   (mapcar (lambda (context)
                             (when (mu4e-context-vars context)
                               (cdr (assq 'user-mail-address (mu4e-context-vars context)))))
                           mu4e-contexts)))

       (add-hook 'mu4e-mark-execute-pre-hook
                 (lambda (mark msg)
                   (cond ((equal mark 'refile) (mu4e-action-retag-message msg "-\\Inbox"))
                         ((equal mark 'trash) (mu4e-action-retag-message msg "-\\Inbox,-\\Starred"))
                         ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred"))
                         ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred")))))

       (setq mu4e-marks (assq-delete-all 'trash mu4e-marks))
       (add-to-list 'mu4e-marks
                    '(trash
                      :char ("d" . "▼")
                      :prompt "dtrash"
                      :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
                      :action (lambda (docid msg target) 
                                (mu4e~proc-move docid
                                                (mu4e~mark-check-target target) "-N"))))


       ;; Refile will set mail to All Mail (basically archiving them). I want this to
       ;; auto-mark them as read, so I redefine refile to add the +S tag.
       (setq mu4e-marks (assq-delete-all 'refile mu4e-marks))
       (add-to-list 'mu4e-marks
                    '(refile
                      :char ("r" . "▶")
                      :prompt "refile"
                      :dyn-target (lambda (target msg) (mu4e-get-refile-folder msg))
                      :action (lambda (docid msg target)
                                (mu4e~proc-move docid (mu4e~mark-check-target target) "+S-u-N"))))))


  (with-eval-after-load 'org
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "" "Tasks")
             "* TODO %?\n  %u")
            ("l" "Todo (location)" entry (file+headline "" "Tasks")
             "* TODO %?\n  %u\n  %a")
            ("u" "Todo (url)" entry (file+headline "" "Tasks")
             "* TODO %?\n  %u\n  %^C")
            ("m" "Todo (mail)" entry (file+headline "" "Tasks")
             "* TODO %?%:subject\n  %u\n  %a"))))

  (with-eval-after-load 'mu4e-alert
    (mu4e-alert-set-default-style 'notifier))

  (with-eval-after-load 'ispell
    (setq ispell-program-name "/usr/local/bin/aspell"))

  ;; don't highlight lines in terminal mode
  (let ((comint-hooks '(eshell-mode-hook
                        term-mode-hook
                        messages-buffer-mode-hook
                        comint-mode-hook)))
    (spacemacs/add-to-hooks (defun bb/no-hl-line-mode ()
                              (setq-local global-hl-line-mode nil))
                            comint-hooks))

  (with-eval-after-load 'tramp
    (add-to-list 'tramp-default-user-alist
                 '("ssh" "ssh\\.we-knowhow\\.dk" "we-knowhow.dk")))


  (defun run-app-ansi-color-filter (process output)
    (require 'ansi-color)

    (when (buffer-live-p (process-buffer process))
      (with-current-buffer (process-buffer process)
        (let ((moving (= (point) (process-mark process))))
          (save-excursion
            ;; Insert the text, advancing the process marker.
            (goto-char (process-mark process))
            (insert (replace-regexp-in-string "\r" "" output))
            (ansi-color-apply-on-region (process-mark process) (point))
            (set-marker (process-mark process) (point))
            (comint-truncate-buffer))
          (if moving (goto-char (process-mark process)))))))

  (defun run-app (key)
    (let* ((commands
            '(
              ("server" "~/Code/zendesk/guide-client/" ("yarn" "start"))
              ("arrange" "~/Code/zendesk/guide-client/packages/knowledge-arrange/" ("yarn" "start"))
              ("editor" "~/Code/zendesk/guide-client/packages/knowledge-editor/" ("yarn" "start"))
              ("history" "~/Code/zendesk/guide-client/packages/knowledge-history/" ("yarn" "start"))
              ("lists" "~/Code/zendesk/guide-client/packages/knowledge-lists/" ("yarn" "start"))
              ("permissions" "~/Code/zendesk/guide-client/packages/knowledge-permissions/" ("yarn" "start"))
              ("revisions" "~/Code/zendesk/guide-client/packages/knowledge-revisions/" ("yarn" "start"))
              ("signals" "~/Code/zendesk/guide-client/packages/knowledge-signals/" ("yarn" "start"))
              ("unsupported" "~/Code/zendesk/guide-client/packages/knowledge-unsupported/" ("yarn" "start"))
              ("user-segments" "~/Code/zendesk/guide-client/packages/knowledge-user-segments/" ("yarn" "start"))
              ("verification" "~/Code/zendesk/guide-client/packages/knowledge-verification/" ("yarn" "start"))))
           (buffer-name (format "*run-%s*" key))
           (default-directory (cadr (assoc key commands)))
           (command (caddr (assoc key commands))))
      (unless (get-buffer buffer-name)
        (make-process
         :name (format "run-%s" key)
         :buffer buffer-name
         :command command
         :filter 'run-app-ansi-color-filter
         ))
      (switch-to-buffer buffer-name)))

  (defun find-app ()
    (interactive)
    (helm :sources
          (helm-build-sync-source "test"
            :candidates
            '(
              server
              arrange
              editor
              healthcheck
              history
              lists
              permissions
              revisions
              signals
              unsupported
              user-segments
              verification
              )
            :action 'run-app
            :fuzzy-match t)
          :buffer "*run*"))

  (progn
    (spacemacs/declare-prefix "aa" "applications")
    (define-key evil-motion-state-map (kbd "SPC a a r") 'find-app))

  (add-hook 'eshell-mode-hook
            (lambda ()
              (eshell-cmpl-initialize)
              (define-key eshell-mode-map [remap eshell-pcomplete] 'helm-esh-pcomplete)
              ;; (define-key eshell-mode-map (kbd "M-s f") 'helm-eshell-prompts-all)
              (define-key eshell-mode-map (kbd "M-r") 'helm-eshell-history)))
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ahs-case-fold-search nil t)
 '(ahs-default-range (quote ahs-range-whole-buffer) t)
 '(ahs-idle-interval 0.25 t)
 '(ahs-idle-timer 0 t)
 '(ahs-inhibit-face-list nil t)
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#657b83"])
 '(browse-url-browser-function (quote browse-url-default-macosx-browser))
 '(case-replace nil)
 '(compilation-message-face (quote default))
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(custom-safe-themes
   (quote
    ("08851585c86abcf44bb1232bced2ae13bc9f6323aeda71adfa3791d6e7fea2b6" "a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "3f630e9f343200ce27cfeb44f01c9046a4b2687a4751ba2b30e503da307cd27b" default)))
 '(dumb-jump-selector (quote helm) t)
 '(evil-escape-delay 0.2)
 '(evil-ex-substitute-case (quote sensitive))
 '(fci-rule-color "#073642" t)
 '(flycheck-css-csslint-executable "csslintnext")
 '(flycheck-eslintrc ".eslintrc")
 '(helm-ag-use-agignore t)
 '(highlight-changes-colors (quote ("#d33682" "#6c71c4")))
 '(highlight-symbol-colors
   (--map
    (solarized-color-blend it "#002b36" 0.25)
    (quote
     ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
 '(highlight-symbol-foreground-color "#93a1a1")
 '(highlight-tail-colors
   (quote
    (("#073642" . 0)
     ("#546E00" . 20)
     ("#00736F" . 30)
     ("#00629D" . 50)
     ("#7B6000" . 60)
     ("#8B2C02" . 70)
     ("#93115C" . 85)
     ("#073642" . 100))))
 '(js-indent-level 2)
 '(magit-diff-use-overlays nil)
 '(paradox-github-token t)
 '(polymode-mode-name-override-alist (quote ((elisp . emacs-lisp) (js . js-jsx))))
 '(pos-tip-background-color "#073642")
 '(pos-tip-foreground-color "#93a1a1")
 '(projectile-globally-ignored-files (quote ("TAGS" ".DS_Store")))
 '(ring-bell-function (quote ignore))
 '(safe-local-variable-values
   (quote
    ((prettier-js-mode . t)
     (prettier-js-command)
     (prettier-args . "--single-qoute")
     (prettier-args "--single-qoute")
     (prettier-args)
     (eval add-hook
           (quote before-save-hook)
           (quote prettier)
           nil
           (quote make-it-local))
     (eval add-hook
           (quote write-contents-functions)
           (lambda nil
             (css-comb
              (point-min)
              (point-max))
             nil))
     (eval setq runtests-command
           (expand-file-name "bin/runtests"
                             (projectile-project-root)))
     (runtests-command . "runtests-jest"))))
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
 '(term-default-bg-color "#002b36")
 '(term-default-fg-color "#839496")
 '(timeclock-file "~/Dropbox/timelog")
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#dc322f")
     (40 . "#c85d17")
     (60 . "#be730b")
     (80 . "#b58900")
     (100 . "#a58e00")
     (120 . "#9d9100")
     (140 . "#959300")
     (160 . "#8d9600")
     (180 . "#859900")
     (200 . "#669b32")
     (220 . "#579d4c")
     (240 . "#489e65")
     (260 . "#399f7e")
     (280 . "#2aa198")
     (300 . "#2898af")
     (320 . "#2793ba")
     (340 . "#268fc6")
     (360 . "#268bd2"))))
 '(vc-annotate-very-old-color nil)
 '(weechat-color-list
   (quote
    (unspecified "#002b36" "#073642" "#990A1B" "#dc322f" "#546E00" "#859900" "#7B6000" "#b58900" "#00629D" "#268bd2" "#93115C" "#d33682" "#00736F" "#2aa198" "#839496" "#657b83"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 120 :width normal))))
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil))))
 '(term ((t (:inherit default :foreground "#839496")))))
(defun dotspacemacs/emacs-custom-settings ()
  "Emacs custom settings.
This is an auto-generated function, do not modify its content directly, use
Emacs customize menu instead.
This function is called at the very end of Spacemacs initialization."
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ahs-case-fold-search nil)
 '(ahs-default-range (quote ahs-range-whole-buffer))
 '(ahs-idle-interval 0.25)
 '(ahs-idle-timer 0 t)
 '(ahs-inhibit-face-list nil)
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#073642" "#dc322f" "#859900" "#b58900" "#268bd2" "#d33682" "#2aa198" "#657b83"])
 '(browse-url-browser-function (quote browse-url-default-macosx-browser))
 '(case-replace nil)
 '(compilation-message-face (quote default))
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(custom-safe-themes
   (quote
    ("08851585c86abcf44bb1232bced2ae13bc9f6323aeda71adfa3791d6e7fea2b6" "a8245b7cc985a0610d71f9852e9f2767ad1b852c2bdea6f4aadc12cce9c4d6d0" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "3f630e9f343200ce27cfeb44f01c9046a4b2687a4751ba2b30e503da307cd27b" default)))
 '(dumb-jump-selector (quote helm) t)
 '(evil-escape-delay 0.2)
 '(evil-ex-substitute-case (quote sensitive))
 '(fci-rule-color "#073642")
 '(flycheck-css-csslint-executable "csslintnext")
 '(flycheck-eslintrc ".eslintrc")
 '(helm-ag-use-agignore t)
 '(helm-show-completion-display-function nil)
 '(highlight-changes-colors (quote ("#d33682" "#6c71c4")))
 '(highlight-symbol-colors
   (--map
    (solarized-color-blend it "#002b36" 0.25)
    (quote
     ("#b58900" "#2aa198" "#dc322f" "#6c71c4" "#859900" "#cb4b16" "#268bd2"))))
 '(highlight-symbol-foreground-color "#93a1a1")
 '(highlight-tail-colors
   (quote
    (("#073642" . 0)
     ("#546E00" . 20)
     ("#00736F" . 30)
     ("#00629D" . 50)
     ("#7B6000" . 60)
     ("#8B2C02" . 70)
     ("#93115C" . 85)
     ("#073642" . 100))))
 '(js-indent-level 2)
 '(magit-diff-use-overlays nil)
 '(package-selected-packages
   (quote
    (mu4e-jump-to-list yapfify stickyfunc-enhance pytest pyenv-mode py-isort pippel pipenv pyvenv pip-requirements live-py-mode importmagic epc ctable concurrent deferred helm-pydoc helm-gtags helm-cscope xcscope ggtags cython-mode counsel-gtags company-anaconda company anaconda-mode pythonic devdocs graphql-mode dockerfile-mode forge ghub closql emacsql-sqlite emacsql treepy graphql yasnippet-snippets yaml-mode xterm-color ws-butler writeroom-mode winum which-key web-mode web-beautify volatile-highlights vmd-mode vi-tilde-fringe uuidgen use-package typescript-mode treemacs-projectile treemacs-evil todotxt-mode toc-org terminal-here tagedit symon string-inflection sql-indent speed-type spaceline-all-the-icons smeargle slim-mode shell-pop seeing-is-believing scss-mode sass-mode rvm runtests ruby-tools ruby-test-mode ruby-refactor ruby-hash-syntax rubocop rspec-mode robe reveal-in-osx-finder restclient-helm restart-emacs rbenv rake rainbow-delimiters pug-mode prettier-js popwin poly-markdown persp-mode password-generator paradox ox-gfm overseer osx-trash osx-dictionary orgit org-projectile org-present org-pomodoro org-mime org-download org-bullets org-brain open-junk-file ob-restclient ob-http nodejs-repl nameless multi-term mu4e-maildirs-extension mu4e-alert move-text monokai-theme mmm-mode minitest material-theme markdown-toc magit-svn magit-gitflow macrostep lorem-ipsum link-hint launchctl json-mode indent-guide impatient-mode hungry-delete hl-todo highlight-parentheses highlight-numbers highlight-indentation helm-xref helm-themes helm-swoop helm-purpose helm-projectile helm-org-rifle helm-mu helm-mode-manager helm-make helm-gitignore helm-git-grep helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag graphviz-dot-mode google-translate golden-ratio gnuplot gitignore-templates gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ gh-md fuzzy font-lock+ flyspell-correct-helm flycheck-pos-tip flx-ido fill-column-indicator figlet fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-org evil-numbers evil-nerd-commenter evil-matchit evil-magit evil-lisp-state evil-lion evil-indent-plus evil-iedit-state evil-goggles evil-exchange evil-escape evil-ediff evil-cleverparens evil-args evil-anzu eval-sexp-fu eshell-z eshell-prompt-extras esh-help elisp-slime-nav editorconfig dumb-jump dotenv-mode doom-modeline diminish diff-hl csv-mode css-comb counsel-projectile company-web company-statistics company-restclient column-enforce-mode clean-aindent-mode chruby centered-cursor-mode bundler bufshow browse-at-remote auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile aggressive-indent ace-link ace-jump-helm-line ac-ispell)))
 '(paradox-github-token t)
 '(polymode-mode-name-alias-alist (quote ((elisp . emacs-lisp) (js . js-jsx))))
 '(polymode-mode-name-override-alist (quote ((elisp . emacs-lisp) (js . js-jsx))))
 '(pos-tip-background-color "#073642")
 '(pos-tip-foreground-color "#93a1a1")
 '(projectile-globally-ignored-files (quote ("TAGS" ".DS_Store")))
 '(ring-bell-function (quote ignore))
 '(safe-local-variable-values
   (quote
    ((prettier-js-mode . t)
     (prettier-js-command)
     (prettier-args . "--single-qoute")
     (prettier-args "--single-qoute")
     (prettier-args)
     (eval add-hook
           (quote before-save-hook)
           (quote prettier)
           nil
           (quote make-it-local))
     (eval add-hook
           (quote write-contents-functions)
           (lambda nil
             (css-comb
              (point-min)
              (point-max))
             nil))
     (eval setq runtests-command
           (expand-file-name "bin/runtests"
                             (projectile-project-root)))
     (runtests-command . "runtests-jest"))))
 '(smartrep-mode-line-active-bg (solarized-color-blend "#859900" "#073642" 0.2))
 '(term-default-bg-color "#002b36")
 '(term-default-fg-color "#839496")
 '(timeclock-file "~/Dropbox/timelog")
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#dc322f")
     (40 . "#c85d17")
     (60 . "#be730b")
     (80 . "#b58900")
     (100 . "#a58e00")
     (120 . "#9d9100")
     (140 . "#959300")
     (160 . "#8d9600")
     (180 . "#859900")
     (200 . "#669b32")
     (220 . "#579d4c")
     (240 . "#489e65")
     (260 . "#399f7e")
     (280 . "#2aa198")
     (300 . "#2898af")
     (320 . "#2793ba")
     (340 . "#268fc6")
     (360 . "#268bd2"))))
 '(vc-annotate-very-old-color nil)
 '(weechat-color-list
   (quote
    (unspecified "#002b36" "#073642" "#990A1B" "#dc322f" "#546E00" "#859900" "#7B6000" "#b58900" "#00629D" "#268bd2" "#93115C" "#d33682" "#00736F" "#2aa198" "#839496" "#657b83"))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "DejaVu Sans Mono" :foundry "unknown" :slant normal :weight normal :height 120 :width normal))))
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil))))
 '(mu4e-forwarded-face ((t (:inherit default :weight normal))))
 '(mu4e-replied-face ((t (:inherit default :weight normal))))
 '(mu4e-special-header-value-face ((t (:inherit default))))
 '(term ((t (:inherit default :foreground "#839496")))))
)

